
import Project.ConnectionProvider;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author dnedk
 */
public class rentBook extends javax.swing.JFrame {

    /**
     * Creates new form rentBook
     */
    public rentBook() {
        initComponents();
       try
       { 
           Connection con = ConnectionProvider.getCon();
           Statement st = con.createStatement();
           ResultSet rs = st.executeQuery("SELECT c.personalNumber,c.name,c.lastName,b.isbn,b.title "
                     + "FROM rentedBooks AS r "
                     + "INNER JOIN client as c ON r.personID=c.id "
                     + "INNER JOIN book as b ON r.bookID=b.id;");
            rentedBooksTable.setModel(DbUtils.resultSetToTableModel(rs));
       }
       catch(Exception e){
           JOptionPane.showMessageDialog(null, "Connection Error");
       }
        try {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("select id,isbn,title,author,genre from book");
           /*ResultSet rs = st.executeQuery("select b.id,b.isbn,b.title,b.author,b.genre from book as b "
                   + "left join rentedbooks as r on r.bookid = b.id "
                   + "where r.bookid is null;");*/
                booksTable.setModel(DbUtils.resultSetToTableModel(rs));
                booksTable.getColumnModel().getColumn(0).setMinWidth(0);
                booksTable.getColumnModel().getColumn(0).setMaxWidth(0);
                booksTable.getColumnModel().getColumn(0).setWidth(0);
            } 
            catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Connection Error");
        }
        try {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("select id,personalNumber,name,lastName from client");
                personsTable.setModel(DbUtils.resultSetToTableModel(rs));
                personsTable.getColumnModel().getColumn(0).setMinWidth(0);
                personsTable.getColumnModel().getColumn(0).setMaxWidth(0);
                personsTable.getColumnModel().getColumn(0).setWidth(0);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Connection Error");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        personalNumberLbl = new javax.swing.JLabel();
        firstNameLbl = new javax.swing.JLabel();
        lastNameLbl = new javax.swing.JLabel();
        personalNumberTF = new javax.swing.JTextField();
        firstNameTF = new javax.swing.JTextField();
        lastNameTF = new javax.swing.JTextField();
        ISBNLbl = new javax.swing.JLabel();
        titleLbl = new javax.swing.JLabel();
        authorLbl = new javax.swing.JLabel();
        genreLbl = new javax.swing.JLabel();
        ISBNTF = new javax.swing.JTextField();
        titleTF = new javax.swing.JTextField();
        authorTF = new javax.swing.JTextField();
        genreTF = new javax.swing.JTextField();
        searchPersonBTn = new javax.swing.JButton();
        searchBookBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        personsTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        booksTable = new javax.swing.JTable();
        pBackBtn = new javax.swing.JButton();
        bBackBtn = new javax.swing.JButton();
        rentDateLbl = new javax.swing.JLabel();
        returnDateLbl = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        rentBtn = new javax.swing.JButton();
        closeBtn = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        rentedBooksTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(40, 15));
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        personalNumberLbl.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        personalNumberLbl.setForeground(new java.awt.Color(255, 255, 255));
        personalNumberLbl.setText("Personal Number:");
        getContentPane().add(personalNumberLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 12, 190, 36));

        firstNameLbl.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        firstNameLbl.setForeground(new java.awt.Color(255, 255, 255));
        firstNameLbl.setText("First Name:");
        getContentPane().add(firstNameLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 79, 190, 21));

        lastNameLbl.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lastNameLbl.setForeground(new java.awt.Color(255, 255, 255));
        lastNameLbl.setText("Last Name:");
        getContentPane().add(lastNameLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 118, 190, 36));
        getContentPane().add(personalNumberTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(241, 13, 174, 38));
        getContentPane().add(firstNameTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(241, 71, 174, 36));
        getContentPane().add(lastNameTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(241, 118, 174, -1));

        ISBNLbl.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ISBNLbl.setForeground(new java.awt.Color(255, 255, 255));
        ISBNLbl.setText("ISBN");
        getContentPane().add(ISBNLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(433, 11, 158, 38));

        titleLbl.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        titleLbl.setForeground(new java.awt.Color(255, 255, 255));
        titleLbl.setText("Title");
        getContentPane().add(titleLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(433, 79, 158, -1));

        authorLbl.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        authorLbl.setForeground(new java.awt.Color(255, 255, 255));
        authorLbl.setText("Author");
        getContentPane().add(authorLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(433, 118, 158, -1));

        genreLbl.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        genreLbl.setForeground(new java.awt.Color(255, 255, 255));
        genreLbl.setText("Genre");
        getContentPane().add(genreLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(433, 165, 158, 36));
        getContentPane().add(ISBNTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(701, 11, 184, 38));
        getContentPane().add(titleTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(701, 67, 184, 36));
        getContentPane().add(authorTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(701, 118, 184, 36));
        getContentPane().add(genreTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(701, 167, 184, 36));

        searchPersonBTn.setText("SEARCH PERSON");
        searchPersonBTn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchPersonBTnActionPerformed(evt);
            }
        });
        getContentPane().add(searchPersonBTn, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 230, 152, 40));

        searchBookBtn.setText("SEARCH BOOK");
        searchBookBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBookBtnActionPerformed(evt);
            }
        });
        getContentPane().add(searchBookBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 220, 159, 40));

        personsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Personal Number", "First Name", "Last Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        personsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                personsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(personsTable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, 409, 280));

        booksTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ISBN", "Title ", "Author", "Genre"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        booksTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                booksTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(booksTable);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 360, 460, 280));

        pBackBtn.setText("BACK");
        pBackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pBackBtnActionPerformed(evt);
            }
        });
        getContentPane().add(pBackBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 290, 153, 50));

        bBackBtn.setText("BACK");
        bBackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBackBtnActionPerformed(evt);
            }
        });
        getContentPane().add(bBackBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 280, 159, 50));

        rentDateLbl.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        rentDateLbl.setForeground(new java.awt.Color(255, 255, 255));
        rentDateLbl.setText("Rent Date:");
        getContentPane().add(rentDateLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(926, 11, 151, -1));

        returnDateLbl.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        returnDateLbl.setForeground(new java.awt.Color(255, 255, 255));
        returnDateLbl.setText("Return Date:");
        getContentPane().add(returnDateLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(926, 71, 151, 30));
        getContentPane().add(jDateChooser1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1095, 11, 200, 41));
        getContentPane().add(jDateChooser2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1095, 58, 200, 43));

        rentBtn.setText("RENT THE BOOK");
        rentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rentBtnActionPerformed(evt);
            }
        });
        getContentPane().add(rentBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 110, 200, 49));

        closeBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        closeBtn.setText("CLOSE");
        closeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBtnActionPerformed(evt);
            }
        });
        getContentPane().add(closeBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 650, 202, 59));

        rentedBooksTable.setBorder(new javax.swing.border.MatteBorder(null));
        rentedBooksTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Personal Number", "Name", "Last Name", "ISBN", "Book Title"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(rentedBooksTable);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 360, 404, 280));

        jButton1.setText("CLEAR FIELDS");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 170, 200, 50));

        jLabel2.setIcon(new javax.swing.ImageIcon("C:\\Users\\dnedk\\Downloads\\GirlInLibrary_cover.jpg")); // NOI18N
        jLabel2.setText("jLabel2");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(-250, -250, 1560, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents
private void clearPersonFields() {
        personalNumberTF.setText("");
        firstNameTF.setText("");
        lastNameTF.setText("");
    }

private void clearBookFields() {
        ISBNTF.setText("");
        titleTF.setText("");
        authorTF.setText("");
        genreTF.setText("");
    }

private void updatePersonTable() {
        try {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("select * from client");
            personsTable.setModel(DbUtils.resultSetToTableModel(rs));
            personsTable.getColumnModel().getColumn(0).setMinWidth(0);
            personsTable.getColumnModel().getColumn(0).setMaxWidth(0);
            personsTable.getColumnModel().getColumn(0).setWidth(0);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Connection Error");
        }
    }

private void updateBookTable() {
        try {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("select * from book");
            booksTable.setModel(DbUtils.resultSetToTableModel(rs));
            booksTable.getColumnModel().getColumn(0).setMinWidth(0);
            booksTable.getColumnModel().getColumn(0).setMaxWidth(0);
            booksTable.getColumnModel().getColumn(0).setWidth(0);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Connection Error");
        }
    }   
    int personID =0;
    private void personsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_personsTableMouseClicked
        // TODO add your handling code here:
        int row = personsTable.getSelectedRow();
        Object idObject = personsTable.getValueAt(row, 0);
        String ids = idObject.toString();
        personID = Integer.parseInt(ids);

        if (evt.getClickCount() >= 1) {
            personalNumberTF.setText(personsTable.getValueAt(row, 1).toString());
            firstNameTF.setText(personsTable.getValueAt(row, 2).toString());
            lastNameTF.setText(personsTable.getValueAt(row, 3).toString());

        }
    }//GEN-LAST:event_personsTableMouseClicked

    private void searchPersonBTnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchPersonBTnActionPerformed
        // TODO add your handling code here:
        String personalNumber = personalNumberTF.getText();
        String name = firstNameTF.getText();
        String lastName = lastNameTF.getText();

        try {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();
            if (name.isEmpty() && lastName.isEmpty() && personalNumber.isEmpty()) {
                ResultSet rs = st.executeQuery("select id,personalNumber,name,lastName from client");
                personsTable.setModel(DbUtils.resultSetToTableModel(rs));
                personsTable.getColumnModel().getColumn(0).setMinWidth(0);
                personsTable.getColumnModel().getColumn(0).setMaxWidth(0);
                personsTable.getColumnModel().getColumn(0).setWidth(0);
           
            } else {
                ResultSet rs = st.executeQuery("select id, personalNumber, name , lastName from client "
                        + "where personalNumber = '" + personalNumber + "' or name = '" + name + "' or lastName = '" + lastName + "'");
                personsTable.setModel(DbUtils.resultSetToTableModel(rs));
                personsTable.getColumnModel().getColumn(0).setMinWidth(0);
                personsTable.getColumnModel().getColumn(0).setMaxWidth(0);
                personsTable.getColumnModel().getColumn(0).setWidth(0);
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Connection Error");
        }
    }//GEN-LAST:event_searchPersonBTnActionPerformed
    int bookID = 0;
    private void booksTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_booksTableMouseClicked
        // TODO add your handling code here:
        int row = booksTable.getSelectedRow();
        Object idObject = booksTable.getValueAt(row, 0);
        String ids = idObject.toString();
        bookID = Integer.parseInt(ids);

        if (evt.getClickCount() >= 1) {
            ISBNTF.setText(booksTable.getValueAt(row, 1).toString());
            titleTF.setText(booksTable.getValueAt(row, 2).toString());
            authorTF.setText(booksTable.getValueAt(row, 3).toString());
            genreTF.setText(booksTable.getValueAt(row, 4).toString());
           
        }
    }//GEN-LAST:event_booksTableMouseClicked

    private void searchBookBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBookBtnActionPerformed
        // TODO add your handling code here:
        String ISBN = ISBNTF.getText();
        String title = titleTF.getText();
        String author = authorTF.getText();
        String genre = genreTF.getText();

        try {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();
            if (ISBN.isEmpty() && title.isEmpty() && author.isEmpty() && genre.isEmpty()) {
                ResultSet rs = st.executeQuery("select id,isbn,title,author,genre from book");
                booksTable.setModel(DbUtils.resultSetToTableModel(rs));
                booksTable.getColumnModel().getColumn(0).setMinWidth(0);
                booksTable.getColumnModel().getColumn(0).setMaxWidth(0);
                booksTable.getColumnModel().getColumn(0).setWidth(0);

            } else {
                ResultSet rs = st.executeQuery("select id, isbn, title , author,genre from book "
                        + "where isbn = '" + ISBN + "' or title = '" + title + "' or author = '" + author + "' or genre = '" + genre + "'");
                booksTable.setModel(DbUtils.resultSetToTableModel(rs));
                booksTable.getColumnModel().getColumn(0).setMinWidth(0);
                booksTable.getColumnModel().getColumn(0).setMaxWidth(0);
                booksTable.getColumnModel().getColumn(0).setWidth(0);
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Connection Error");
        }
    }//GEN-LAST:event_searchBookBtnActionPerformed

    private void pBackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pBackBtnActionPerformed
        // TODO add your handling code here:
        personsTable.clearSelection();
        clearPersonFields();
        personID = 0;
         try {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("select id,personalNumber,name,lastName from client");
                personsTable.setModel(DbUtils.resultSetToTableModel(rs));
                personsTable.getColumnModel().getColumn(0).setMinWidth(0);
                personsTable.getColumnModel().getColumn(0).setMaxWidth(0);
                personsTable.getColumnModel().getColumn(0).setWidth(0);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Connection Error");
        }
    }//GEN-LAST:event_pBackBtnActionPerformed

    private void bBackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBackBtnActionPerformed
        // TODO add your handling code here:
        booksTable.clearSelection();
        clearBookFields();
        bookID = 0;
         try {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("select id,isbn,title,author,genre from book");
                booksTable.setModel(DbUtils.resultSetToTableModel(rs));
                booksTable.getColumnModel().getColumn(0).setMinWidth(0);
                booksTable.getColumnModel().getColumn(0).setMaxWidth(0);
                booksTable.getColumnModel().getColumn(0).setWidth(0);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Connection Error");
        }
    }//GEN-LAST:event_bBackBtnActionPerformed

    private void rentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rentBtnActionPerformed
        // TODO add your handling code here:
       SimpleDateFormat dFormat = new SimpleDateFormat("dd-MM-yyyy");
       String rentDate = dFormat.format(jDateChooser1.getDate());
       String dueDate = dFormat.format(jDateChooser2.getDate());
       
      /* String nothing = String.valueOf(bookID);
       jTextField1.setText(rentDate+" "+nothing);
       String nothing1 = String.valueOf(personID);
       jTextField2.setText(dueDate +" "+nothing1);*/
       try{
           Connection con = ConnectionProvider.getCon();
            PreparedStatement st = con.prepareStatement("insert into rentedbooks(personid,bookid,rentdate,duedate)"
                    + " values ('"+personID+"','"+bookID+"','"+rentDate+"','"+dueDate+"')");
            st.executeUpdate();
           JOptionPane.showMessageDialog(null, "Book successfully rented!");
             ResultSet rs = st.executeQuery("SELECT c.personalNumber,c.name,c.lastName,b.isbn,b.title "
                     + "FROM rentedBooks AS r "
                     + "INNER JOIN client as c ON r.personID=c.id "
                     + "INNER JOIN book as b ON r.bookID=b.id;");
            rentedBooksTable.setModel(DbUtils.resultSetToTableModel(rs));
          /* ResultSet rs1 = st.executeQuery("select b.id,b.isbn,b.title,b.author,b.genre from book as b "
                   + "left join rentedbooks as r on r.bookid = b.id "
                   + "where r.bookid is null;");
                booksTable.setModel(DbUtils.resultSetToTableModel(rs1));
                booksTable.getColumnModel().getColumn(0).setMinWidth(0);
                booksTable.getColumnModel().getColumn(0).setMaxWidth(0);
                booksTable.getColumnModel().getColumn(0).setWidth(0);*/
       }
       catch(Exception e){
            JOptionPane.showMessageDialog(null, "Connection error!");
       }
       jDateChooser1.setDate(null);
        jDateChooser2.setDate(null);
        booksTable.clearSelection();
        clearBookFields();
        bookID = 0;
        personsTable.clearSelection();
        clearPersonFields();
        personID = 0;
    }//GEN-LAST:event_rentBtnActionPerformed

    private void closeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtnActionPerformed
        // TODO add your handling code here:
        setVisible(false);
    }//GEN-LAST:event_closeBtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        jDateChooser1.setDate(null);
        jDateChooser2.setDate(null);
        booksTable.clearSelection();
        clearBookFields();
        bookID = 0;
        personsTable.clearSelection();
        clearPersonFields();
        personID = 0;
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(rentBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(rentBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(rentBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(rentBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new rentBook().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ISBNLbl;
    private javax.swing.JTextField ISBNTF;
    private javax.swing.JLabel authorLbl;
    private javax.swing.JTextField authorTF;
    private javax.swing.JButton bBackBtn;
    private javax.swing.JTable booksTable;
    private javax.swing.JButton closeBtn;
    private javax.swing.JLabel firstNameLbl;
    private javax.swing.JTextField firstNameTF;
    private javax.swing.JLabel genreLbl;
    private javax.swing.JTextField genreTF;
    private javax.swing.JButton jButton1;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lastNameLbl;
    private javax.swing.JTextField lastNameTF;
    private javax.swing.JButton pBackBtn;
    private javax.swing.JLabel personalNumberLbl;
    private javax.swing.JTextField personalNumberTF;
    private javax.swing.JTable personsTable;
    private javax.swing.JButton rentBtn;
    private javax.swing.JLabel rentDateLbl;
    private javax.swing.JTable rentedBooksTable;
    private javax.swing.JLabel returnDateLbl;
    private javax.swing.JButton searchBookBtn;
    private javax.swing.JButton searchPersonBTn;
    private javax.swing.JLabel titleLbl;
    private javax.swing.JTextField titleTF;
    // End of variables declaration//GEN-END:variables
}
