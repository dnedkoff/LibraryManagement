
import Project.ConnectionProvider;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author dnedk
 */
public class returnBook extends javax.swing.JFrame {

    /**
     * Creates new form returnBook
     */
    public returnBook() {
        initComponents();
         try {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();
          ResultSet rs = st.executeQuery("SELECT r.rentID,b.isbn,b.title,c.personalNumber,c.name,c.lastName "
                     + "FROM rentedBooks AS r "
                     + "INNER JOIN client as c ON r.personID=c.id "
                     + "INNER JOIN book as b ON r.bookID=b.id;");
                issueTable.setModel(DbUtils.resultSetToTableModel(rs));
                issueTable.getColumnModel().getColumn(0).setMinWidth(0);
                issueTable.getColumnModel().getColumn(0).setMaxWidth(0);
                issueTable.getColumnModel().getColumn(0).setWidth(0);
            } 
            catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Connection Error");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bookISBNLbl = new javax.swing.JLabel();
        bookTitleLbl = new javax.swing.JLabel();
        personalNumberLbl = new javax.swing.JLabel();
        fNameLbl = new javax.swing.JLabel();
        lNameLbl = new javax.swing.JLabel();
        ISBNTF1 = new javax.swing.JTextField();
        bookTitleTF = new javax.swing.JTextField();
        personalNumberTF = new javax.swing.JTextField();
        fNameTF = new javax.swing.JTextField();
        lNameTF = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        issueTable = new javax.swing.JTable();
        searchBtn = new javax.swing.JButton();
        returnBookBtn = new javax.swing.JButton();
        closeBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(210, 60));
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        bookISBNLbl.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        bookISBNLbl.setForeground(new java.awt.Color(255, 255, 255));
        bookISBNLbl.setText("Book ISBN:");
        getContentPane().add(bookISBNLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 20, 144, 36));

        bookTitleLbl.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        bookTitleLbl.setForeground(new java.awt.Color(255, 255, 255));
        bookTitleLbl.setText("Book Title:");
        getContentPane().add(bookTitleLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 70, 144, 36));

        personalNumberLbl.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        personalNumberLbl.setForeground(new java.awt.Color(255, 255, 255));
        personalNumberLbl.setText("Personal Number:");
        getContentPane().add(personalNumberLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 120, 144, 38));

        fNameLbl.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        fNameLbl.setForeground(new java.awt.Color(255, 255, 255));
        fNameLbl.setText("Client First Name:");
        getContentPane().add(fNameLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 170, 144, 34));

        lNameLbl.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lNameLbl.setForeground(new java.awt.Color(255, 255, 255));
        lNameLbl.setText("Client Last Name:");
        getContentPane().add(lNameLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 210, 144, 38));
        getContentPane().add(ISBNTF1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 20, 180, 36));
        getContentPane().add(bookTitleTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 70, 180, 40));
        getContentPane().add(personalNumberTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 120, 180, 38));
        getContentPane().add(fNameTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 170, 180, 34));
        getContentPane().add(lNameTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 210, 180, 38));

        issueTable.setBorder(new javax.swing.border.MatteBorder(null));
        issueTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "issueID", "ISBN", "Title", "Personal Number", "First Name", "Last Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        issueTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                issueTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(issueTable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 310, 781, 340));

        searchBtn.setText("SEARCH ISSUE");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });
        getContentPane().add(searchBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 20, 142, 36));

        returnBookBtn.setText("RETURN BOOK");
        returnBookBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnBookBtnActionPerformed(evt);
            }
        });
        getContentPane().add(returnBookBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 210, 142, 38));

        closeBtn.setText("CLOSE");
        closeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBtnActionPerformed(evt);
            }
        });
        getContentPane().add(closeBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 20, 192, 36));

        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\dnedk\\Downloads\\photo-1521587760476-6c12a4b040da.jpg")); // NOI18N
        jLabel1.setText("jLabel1");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 810, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    int issueID = 0;
    private void issueTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_issueTableMouseClicked
        // TODO add your handling code here:
        int row = issueTable.getSelectedRow();
        Object idObject = issueTable.getValueAt(row, 0);
        String ids = idObject.toString();
        issueID = Integer.parseInt(ids);

        /*if (evt.getClickCount() >= 1) {
            ISBNTF.setText(jTable1.getValueAt(row, 1).toString());
            bookTitleTF.setText(jTable1.getValueAt(row, 2).toString());
            personalNumberTF.setText(jTable1.getValueAt(row, 3).toString());
            fNameTF.setText(jTable1.getValueAt(row, 4).toString());
            lNameTF.setText(jTable1.getValueAt(row, 4).toString());*/            
    }//GEN-LAST:event_issueTableMouseClicked

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // TODO add your handling code here:
        String ISBN = ISBNTF1.getText();
        String title = bookTitleTF.getText();
        String personalNumber = personalNumberTF.getText();
        String fName = fNameTF.getText();
        String lName = lNameTF.getText();
        try {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();
            if (ISBN.isEmpty() && title.isEmpty() && personalNumber.isEmpty() && fName.isEmpty() && lName.isEmpty()) {
                ResultSet rs = st.executeQuery("SELECT r.rentID,b.isbn,b.title,c.personalNumber,c.name,c.lastName "
                     + "FROM rentedBooks AS r "
                     + "INNER JOIN client as c ON r.personID=c.id "
                     + "INNER JOIN book as b ON r.bookID=b.id;");
                issueTable.setModel(DbUtils.resultSetToTableModel(rs));
                issueTable.getColumnModel().getColumn(0).setMinWidth(0);
                issueTable.getColumnModel().getColumn(0).setMaxWidth(0);
                issueTable.getColumnModel().getColumn(0).setWidth(0);
           
            } else {
                    ResultSet rs = st.executeQuery("SELECT r.rentID,b.isbn,b.title,c.personalNumber,c.name,c.lastName FROM"
                            + " rentedBooks AS r"
                            + " INNER JOIN client as c ON r.personID=c.id"
                            + " INNER JOIN book as b ON r.bookID=b.id "
                            + "where (b.title = '"+title+"' and c.personalNumber = '"+personalNumber+"')or"
                                    + " (b.title = '"+title+"' and c.name = '"+fName+"') or"
                                            + " (b.title = '"+title+"' and  c.lastName = '"+lName+"') or"
                                                    + " (b.isbn = '"+ISBN+"' and c.personalnumber = '"+personalNumber+"')"
                                                            + " or(b.isbn = '"+ISBN+"' and c.name = '"+fName+"') "
                                                                    + "or (b.isbn = '"+ISBN+"' and c.lastName = '"+lName+"')");
                  
                  //ResultSet rs = st.executeQuery("SELECT r.rentID,b.isbn,b.title,c.personalNumber,c.name,c.lastName FROM rentedBooks AS r INNER JOIN client as c ON r.personID=c.id INNER JOIN book as b ON r.bookID=b.id where b.title = '"+title+"' or b.isbn = '"+ISBN+"' or c.personalnumber = '"+personalNumber+"' or c.name = '"+fName+"' or c.lastName = '"+lName+"';");
                 
                  /*ResultSet rs = st.executeQuery("SELECT r.rentID,b.isbn,b.title,c.personalNumber,c.name,c.lastName "
                          + "FROM rentedBooks AS r"
                          + " INNER JOIN client as c ON r.personID=c.id "
                          + "INNER JOIN book as b ON r.bookID=b.id "
                          + "where b.title = '"+title+"'"
                          + "and c.lastName = '"+lName+"'");*/
                     
                issueTable.setModel(DbUtils.resultSetToTableModel(rs));
                issueTable.getColumnModel().getColumn(0).setMinWidth(0);
                issueTable.getColumnModel().getColumn(0).setMaxWidth(0);
                issueTable.getColumnModel().getColumn(0).setWidth(0);
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Connection Error");
        }
    }//GEN-LAST:event_searchBtnActionPerformed

    private void returnBookBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnBookBtnActionPerformed
        // TODO add your handling code here:
         try {
            Connection con = ConnectionProvider.getCon();
            PreparedStatement st = con.prepareStatement("DELETE FROM rentedbooks WHERE rentid = '" + issueID + "'");
            st.executeUpdate();
            JOptionPane.showMessageDialog(null, "Successfully Returned!");
            issueTable.clearSelection();
            issueID = 0;
            
            ResultSet rs = st.executeQuery("SELECT r.rentID,b.isbn,b.title,c.personalNumber,c.name,c.lastName "
                     + "FROM rentedBooks AS r "
                     + "INNER JOIN client as c ON r.personID=c.id "
                     + "INNER JOIN book as b ON r.bookID=b.id;");
                issueTable.setModel(DbUtils.resultSetToTableModel(rs));
                issueTable.getColumnModel().getColumn(0).setMinWidth(0);
                issueTable.getColumnModel().getColumn(0).setMaxWidth(0);
                issueTable.getColumnModel().getColumn(0).setWidth(0);
            
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Issue doesn't exist");
            issueTable.clearSelection();
            issueID = 0;
        }
    }//GEN-LAST:event_returnBookBtnActionPerformed

    private void closeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtnActionPerformed
        // TODO add your handling code here:
        setVisible(false);
    }//GEN-LAST:event_closeBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(returnBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(returnBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(returnBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(returnBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new returnBook().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ISBNTF1;
    private javax.swing.JLabel bookISBNLbl;
    private javax.swing.JLabel bookTitleLbl;
    private javax.swing.JTextField bookTitleTF;
    private javax.swing.JButton closeBtn;
    private javax.swing.JLabel fNameLbl;
    private javax.swing.JTextField fNameTF;
    private javax.swing.JTable issueTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lNameLbl;
    private javax.swing.JTextField lNameTF;
    private javax.swing.JLabel personalNumberLbl;
    private javax.swing.JTextField personalNumberTF;
    private javax.swing.JButton returnBookBtn;
    private javax.swing.JButton searchBtn;
    // End of variables declaration//GEN-END:variables
}
